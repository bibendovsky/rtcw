/*

OpenGL v1.1 loader for SDL.

Copyright (c) 2018 Boris I. Bendovsky (bibendovsky@hotmail.com) and Contributors.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
OR OTHER DEALINGS IN THE SOFTWARE.

*/


//
// A replacement of gl.h.
//


#ifndef SDL_OGL11_LOADER_GL_INCLUDED
#define SDL_OGL11_LOADER_GL_INCLUDED


#if !defined(__gl_h_) && !defined(__GL_H__)


#define __gl_h_
#define __GL_H__


#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#define APIENTRY __stdcall
#endif

#ifndef APIENTRY
#define APIENTRY
#endif // !APIENTRY

#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif // !APIENTRYP

#ifndef GLAPI
#define GLAPI extern
#endif // !GLAPI


// ==========================================================================
// API v1.0
//

#ifndef GL_VERSION_1_0
#define GL_VERSION_1_0 1


using GLvoid = void;
using GLboolean = unsigned char;
using GLbyte = signed char;
using GLubyte = unsigned char;
using GLshort = signed short;
using GLushort = unsigned short;
using GLint = signed int;
using GLuint = unsigned int;
using GLsizei = int;
using GLenum = unsigned int;
using GLbitfield = unsigned int;
using GLfloat = float;
using GLdouble = double;


constexpr auto GL_2D = GLushort{0x0600};
constexpr auto GL_2_BYTES = GLushort{0x1407};
constexpr auto GL_3D = GLushort{0x0601};
constexpr auto GL_3D_COLOR = GLushort{0x0602};
constexpr auto GL_3D_COLOR_TEXTURE = GLushort{0x0603};
constexpr auto GL_3_BYTES = GLushort{0x1408};
constexpr auto GL_4D_COLOR_TEXTURE = GLushort{0x0604};
constexpr auto GL_4_BYTES = GLushort{0x1409};
constexpr auto GL_ACCUM = GLushort{0x0100};
constexpr auto GL_ACCUM_ALPHA_BITS = GLushort{0x0D5B};
constexpr auto GL_ACCUM_BLUE_BITS = GLushort{0x0D5A};
constexpr auto GL_ACCUM_CLEAR_VALUE = GLushort{0x0B80};
constexpr auto GL_ACCUM_GREEN_BITS = GLushort{0x0D59};
constexpr auto GL_ACCUM_RED_BITS = GLushort{0x0D58};
constexpr auto GL_ADD = GLushort{0x0104};
constexpr auto GL_ALPHA = GLushort{0x1906};
constexpr auto GL_ALPHA_BIAS = GLushort{0x0D1D};
constexpr auto GL_ALPHA_BITS = GLushort{0x0D55};
constexpr auto GL_ALPHA_SCALE = GLushort{0x0D1C};
constexpr auto GL_ALPHA_TEST = GLushort{0x0BC0};
constexpr auto GL_ALPHA_TEST_FUNC = GLushort{0x0BC1};
constexpr auto GL_ALPHA_TEST_REF = GLushort{0x0BC2};
constexpr auto GL_ALWAYS = GLushort{0x0207};
constexpr auto GL_AMBIENT = GLushort{0x1200};
constexpr auto GL_AMBIENT_AND_DIFFUSE = GLushort{0x1602};
constexpr auto GL_AND = GLushort{0x1501};
constexpr auto GL_AND_INVERTED = GLushort{0x1504};
constexpr auto GL_AND_REVERSE = GLushort{0x1502};
constexpr auto GL_ATTRIB_STACK_DEPTH = GLushort{0x0BB0};
constexpr auto GL_AUTO_NORMAL = GLushort{0x0D80};
constexpr auto GL_AUX0 = GLushort{0x0409};
constexpr auto GL_AUX1 = GLushort{0x040A};
constexpr auto GL_AUX2 = GLushort{0x040B};
constexpr auto GL_AUX3 = GLushort{0x040C};
constexpr auto GL_AUX_BUFFERS = GLushort{0x0C00};
constexpr auto GL_BACK = GLushort{0x0405};
constexpr auto GL_BACK_LEFT = GLushort{0x0402};
constexpr auto GL_BACK_RIGHT = GLushort{0x0403};
constexpr auto GL_BITMAP = GLushort{0x1A00};
constexpr auto GL_BITMAP_TOKEN = GLushort{0x0704};
constexpr auto GL_BLEND = GLushort{0x0BE2};
constexpr auto GL_BLEND_DST = GLushort{0x0BE0};
constexpr auto GL_BLEND_SRC = GLushort{0x0BE1};
constexpr auto GL_BLUE = GLushort{0x1905};
constexpr auto GL_BLUE_BIAS = GLushort{0x0D1B};
constexpr auto GL_BLUE_BITS = GLushort{0x0D54};
constexpr auto GL_BLUE_SCALE = GLushort{0x0D1A};
constexpr auto GL_BYTE = GLushort{0x1400};
constexpr auto GL_CCW = GLushort{0x0901};
constexpr auto GL_CLAMP = GLushort{0x2900};
constexpr auto GL_CLEAR = GLushort{0x1500};
constexpr auto GL_CLIP_PLANE0 = GLushort{0x3000};
constexpr auto GL_CLIP_PLANE1 = GLushort{0x3001};
constexpr auto GL_CLIP_PLANE2 = GLushort{0x3002};
constexpr auto GL_CLIP_PLANE3 = GLushort{0x3003};
constexpr auto GL_CLIP_PLANE4 = GLushort{0x3004};
constexpr auto GL_CLIP_PLANE5 = GLushort{0x3005};
constexpr auto GL_COEFF = GLushort{0x0A00};
constexpr auto GL_COLOR = GLushort{0x1800};
constexpr auto GL_COLOR_CLEAR_VALUE = GLushort{0x0C22};
constexpr auto GL_COLOR_INDEX = GLushort{0x1900};
constexpr auto GL_COLOR_INDEXES = GLushort{0x1603};
constexpr auto GL_COLOR_MATERIAL = GLushort{0x0B57};
constexpr auto GL_COLOR_MATERIAL_FACE = GLushort{0x0B55};
constexpr auto GL_COLOR_MATERIAL_PARAMETER = GLushort{0x0B56};
constexpr auto GL_COLOR_WRITEMASK = GLushort{0x0C23};
constexpr auto GL_COMPILE = GLushort{0x1300};
constexpr auto GL_COMPILE_AND_EXECUTE = GLushort{0x1301};
constexpr auto GL_CONSTANT_ATTENUATION = GLushort{0x1207};
constexpr auto GL_COPY = GLushort{0x1503};
constexpr auto GL_COPY_INVERTED = GLushort{0x150C};
constexpr auto GL_COPY_PIXEL_TOKEN = GLushort{0x0706};
constexpr auto GL_CULL_FACE = GLushort{0x0B44};
constexpr auto GL_CULL_FACE_MODE = GLushort{0x0B45};
constexpr auto GL_CURRENT_COLOR = GLushort{0x0B00};
constexpr auto GL_CURRENT_INDEX = GLushort{0x0B01};
constexpr auto GL_CURRENT_NORMAL = GLushort{0x0B02};
constexpr auto GL_CURRENT_RASTER_COLOR = GLushort{0x0B04};
constexpr auto GL_CURRENT_RASTER_DISTANCE = GLushort{0x0B09};
constexpr auto GL_CURRENT_RASTER_INDEX = GLushort{0x0B05};
constexpr auto GL_CURRENT_RASTER_POSITION = GLushort{0x0B07};
constexpr auto GL_CURRENT_RASTER_POSITION_VALID = GLushort{0x0B08};
constexpr auto GL_CURRENT_RASTER_TEXTURE_COORDS = GLushort{0x0B06};
constexpr auto GL_CURRENT_TEXTURE_COORDS = GLushort{0x0B03};
constexpr auto GL_CW = GLushort{0x0900};
constexpr auto GL_DECAL = GLushort{0x2101};
constexpr auto GL_DECR = GLushort{0x1E03};
constexpr auto GL_DEPTH = GLushort{0x1801};
constexpr auto GL_DEPTH_BIAS = GLushort{0x0D1F};
constexpr auto GL_DEPTH_BITS = GLushort{0x0D56};
constexpr auto GL_DEPTH_CLEAR_VALUE = GLushort{0x0B73};
constexpr auto GL_DEPTH_COMPONENT = GLushort{0x1902};
constexpr auto GL_DEPTH_FUNC = GLushort{0x0B74};
constexpr auto GL_DEPTH_RANGE = GLushort{0x0B70};
constexpr auto GL_DEPTH_SCALE = GLushort{0x0D1E};
constexpr auto GL_DEPTH_TEST = GLushort{0x0B71};
constexpr auto GL_DEPTH_WRITEMASK = GLushort{0x0B72};
constexpr auto GL_DIFFUSE = GLushort{0x1201};
constexpr auto GL_DITHER = GLushort{0x0BD0};
constexpr auto GL_DOMAIN = GLushort{0x0A02};
constexpr auto GL_DONT_CARE = GLushort{0x1100};
constexpr auto GL_DOUBLEBUFFER = GLushort{0x0C32};
constexpr auto GL_DRAW_BUFFER = GLushort{0x0C01};
constexpr auto GL_DRAW_PIXEL_TOKEN = GLushort{0x0705};
constexpr auto GL_DST_ALPHA = GLushort{0x0304};
constexpr auto GL_DST_COLOR = GLushort{0x0306};
constexpr auto GL_EDGE_FLAG = GLushort{0x0B43};
constexpr auto GL_EMISSION = GLushort{0x1600};
constexpr auto GL_EQUAL = GLushort{0x0202};
constexpr auto GL_EQUIV = GLushort{0x1509};
constexpr auto GL_EXP = GLushort{0x0800};
constexpr auto GL_EXP2 = GLushort{0x0801};
constexpr auto GL_EXTENSIONS = GLushort{0x1F03};
constexpr auto GL_EYE_LINEAR = GLushort{0x2400};
constexpr auto GL_EYE_PLANE = GLushort{0x2502};
constexpr auto GL_FALSE = GLushort{0};
constexpr auto GL_FASTEST = GLushort{0x1101};
constexpr auto GL_FEEDBACK = GLushort{0x1C01};
constexpr auto GL_FILL = GLushort{0x1B02};
constexpr auto GL_FLAT = GLushort{0x1D00};
constexpr auto GL_FLOAT = GLushort{0x1406};
constexpr auto GL_FOG = GLushort{0x0B60};
constexpr auto GL_FOG_COLOR = GLushort{0x0B66};
constexpr auto GL_FOG_DENSITY = GLushort{0x0B62};
constexpr auto GL_FOG_END = GLushort{0x0B64};
constexpr auto GL_FOG_HINT = GLushort{0x0C54};
constexpr auto GL_FOG_INDEX = GLushort{0x0B61};
constexpr auto GL_FOG_MODE = GLushort{0x0B65};
constexpr auto GL_FOG_START = GLushort{0x0B63};
constexpr auto GL_FRONT = GLushort{0x0404};
constexpr auto GL_FRONT_AND_BACK = GLushort{0x0408};
constexpr auto GL_FRONT_FACE = GLushort{0x0B46};
constexpr auto GL_FRONT_LEFT = GLushort{0x0400};
constexpr auto GL_FRONT_RIGHT = GLushort{0x0401};
constexpr auto GL_GEQUAL = GLushort{0x0206};
constexpr auto GL_GREATER = GLushort{0x0204};
constexpr auto GL_GREEN = GLushort{0x1904};
constexpr auto GL_GREEN_BIAS = GLushort{0x0D19};
constexpr auto GL_GREEN_BITS = GLushort{0x0D53};
constexpr auto GL_GREEN_SCALE = GLushort{0x0D18};
constexpr auto GL_INCR = GLushort{0x1E02};
constexpr auto GL_INDEX_BITS = GLushort{0x0D51};
constexpr auto GL_INDEX_CLEAR_VALUE = GLushort{0x0C20};
constexpr auto GL_INDEX_MODE = GLushort{0x0C30};
constexpr auto GL_INDEX_OFFSET = GLushort{0x0D13};
constexpr auto GL_INDEX_SHIFT = GLushort{0x0D12};
constexpr auto GL_INDEX_WRITEMASK = GLushort{0x0C21};
constexpr auto GL_INT = GLushort{0x1404};
constexpr auto GL_INVALID_ENUM = GLushort{0x0500};
constexpr auto GL_INVALID_OPERATION = GLushort{0x0502};
constexpr auto GL_INVALID_VALUE = GLushort{0x0501};
constexpr auto GL_INVERT = GLushort{0x150A};
constexpr auto GL_KEEP = GLushort{0x1E00};
constexpr auto GL_LEFT = GLushort{0x0406};
constexpr auto GL_LEQUAL = GLushort{0x0203};
constexpr auto GL_LESS = GLushort{0x0201};
constexpr auto GL_LIGHT0 = GLushort{0x4000};
constexpr auto GL_LIGHT1 = GLushort{0x4001};
constexpr auto GL_LIGHT2 = GLushort{0x4002};
constexpr auto GL_LIGHT3 = GLushort{0x4003};
constexpr auto GL_LIGHT4 = GLushort{0x4004};
constexpr auto GL_LIGHT5 = GLushort{0x4005};
constexpr auto GL_LIGHT6 = GLushort{0x4006};
constexpr auto GL_LIGHT7 = GLushort{0x4007};
constexpr auto GL_LIGHTING = GLushort{0x0B50};
constexpr auto GL_LIGHT_MODEL_AMBIENT = GLushort{0x0B53};
constexpr auto GL_LIGHT_MODEL_LOCAL_VIEWER = GLushort{0x0B51};
constexpr auto GL_LIGHT_MODEL_TWO_SIDE = GLushort{0x0B52};
constexpr auto GL_LINE = GLushort{0x1B01};
constexpr auto GL_LINEAR = GLushort{0x2601};
constexpr auto GL_LINEAR_ATTENUATION = GLushort{0x1208};
constexpr auto GL_LINEAR_MIPMAP_LINEAR = GLushort{0x2703};
constexpr auto GL_LINEAR_MIPMAP_NEAREST = GLushort{0x2701};
constexpr auto GL_LINES = GLushort{0x0001};
constexpr auto GL_LINE_LOOP = GLushort{0x0002};
constexpr auto GL_LINE_RESET_TOKEN = GLushort{0x0707};
constexpr auto GL_LINE_SMOOTH = GLushort{0x0B20};
constexpr auto GL_LINE_SMOOTH_HINT = GLushort{0x0C52};
constexpr auto GL_LINE_STIPPLE = GLushort{0x0B24};
constexpr auto GL_LINE_STIPPLE_PATTERN = GLushort{0x0B25};
constexpr auto GL_LINE_STIPPLE_REPEAT = GLushort{0x0B26};
constexpr auto GL_LINE_STRIP = GLushort{0x0003};
constexpr auto GL_LINE_TOKEN = GLushort{0x0702};
constexpr auto GL_LINE_WIDTH = GLushort{0x0B21};
constexpr auto GL_LINE_WIDTH_GRANULARITY = GLushort{0x0B23};
constexpr auto GL_LINE_WIDTH_RANGE = GLushort{0x0B22};
constexpr auto GL_LIST_BASE = GLushort{0x0B32};
constexpr auto GL_LIST_INDEX = GLushort{0x0B33};
constexpr auto GL_LIST_MODE = GLushort{0x0B30};
constexpr auto GL_LOAD = GLushort{0x0101};
constexpr auto GL_LOGIC_OP = GLushort{0x0BF1};
constexpr auto GL_LOGIC_OP_MODE = GLushort{0x0BF0};
constexpr auto GL_LUMINANCE = GLushort{0x1909};
constexpr auto GL_LUMINANCE_ALPHA = GLushort{0x190A};
constexpr auto GL_MAP1_COLOR_4 = GLushort{0x0D90};
constexpr auto GL_MAP1_GRID_DOMAIN = GLushort{0x0DD0};
constexpr auto GL_MAP1_GRID_SEGMENTS = GLushort{0x0DD1};
constexpr auto GL_MAP1_INDEX = GLushort{0x0D91};
constexpr auto GL_MAP1_NORMAL = GLushort{0x0D92};
constexpr auto GL_MAP1_TEXTURE_COORD_1 = GLushort{0x0D93};
constexpr auto GL_MAP1_TEXTURE_COORD_2 = GLushort{0x0D94};
constexpr auto GL_MAP1_TEXTURE_COORD_3 = GLushort{0x0D95};
constexpr auto GL_MAP1_TEXTURE_COORD_4 = GLushort{0x0D96};
constexpr auto GL_MAP1_VERTEX_3 = GLushort{0x0D97};
constexpr auto GL_MAP1_VERTEX_4 = GLushort{0x0D98};
constexpr auto GL_MAP2_COLOR_4 = GLushort{0x0DB0};
constexpr auto GL_MAP2_GRID_DOMAIN = GLushort{0x0DD2};
constexpr auto GL_MAP2_GRID_SEGMENTS = GLushort{0x0DD3};
constexpr auto GL_MAP2_INDEX = GLushort{0x0DB1};
constexpr auto GL_MAP2_NORMAL = GLushort{0x0DB2};
constexpr auto GL_MAP2_TEXTURE_COORD_1 = GLushort{0x0DB3};
constexpr auto GL_MAP2_TEXTURE_COORD_2 = GLushort{0x0DB4};
constexpr auto GL_MAP2_TEXTURE_COORD_3 = GLushort{0x0DB5};
constexpr auto GL_MAP2_TEXTURE_COORD_4 = GLushort{0x0DB6};
constexpr auto GL_MAP2_VERTEX_3 = GLushort{0x0DB7};
constexpr auto GL_MAP2_VERTEX_4 = GLushort{0x0DB8};
constexpr auto GL_MAP_COLOR = GLushort{0x0D10};
constexpr auto GL_MAP_STENCIL = GLushort{0x0D11};
constexpr auto GL_MATRIX_MODE = GLushort{0x0BA0};
constexpr auto GL_MAX_ATTRIB_STACK_DEPTH = GLushort{0x0D35};
constexpr auto GL_MAX_CLIP_PLANES = GLushort{0x0D32};
constexpr auto GL_MAX_EVAL_ORDER = GLushort{0x0D30};
constexpr auto GL_MAX_LIGHTS = GLushort{0x0D31};
constexpr auto GL_MAX_LIST_NESTING = GLushort{0x0B31};
constexpr auto GL_MAX_MODELVIEW_STACK_DEPTH = GLushort{0x0D36};
constexpr auto GL_MAX_NAME_STACK_DEPTH = GLushort{0x0D37};
constexpr auto GL_MAX_PIXEL_MAP_TABLE = GLushort{0x0D34};
constexpr auto GL_MAX_PROJECTION_STACK_DEPTH = GLushort{0x0D38};
constexpr auto GL_MAX_TEXTURE_SIZE = GLushort{0x0D33};
constexpr auto GL_MAX_TEXTURE_STACK_DEPTH = GLushort{0x0D39};
constexpr auto GL_MAX_VIEWPORT_DIMS = GLushort{0x0D3A};
constexpr auto GL_MODELVIEW = GLushort{0x1700};
constexpr auto GL_MODELVIEW_MATRIX = GLushort{0x0BA6};
constexpr auto GL_MODELVIEW_STACK_DEPTH = GLushort{0x0BA3};
constexpr auto GL_MODULATE = GLushort{0x2100};
constexpr auto GL_MULT = GLushort{0x0103};
constexpr auto GL_NAME_STACK_DEPTH = GLushort{0x0D70};
constexpr auto GL_NAND = GLushort{0x150E};
constexpr auto GL_NEAREST = GLushort{0x2600};
constexpr auto GL_NEAREST_MIPMAP_LINEAR = GLushort{0x2702};
constexpr auto GL_NEAREST_MIPMAP_NEAREST = GLushort{0x2700};
constexpr auto GL_NEVER = GLushort{0x0200};
constexpr auto GL_NICEST = GLushort{0x1102};
constexpr auto GL_NONE = GLushort{0};
constexpr auto GL_NOOP = GLushort{0x1505};
constexpr auto GL_NOR = GLushort{0x1508};
constexpr auto GL_NORMALIZE = GLushort{0x0BA1};
constexpr auto GL_NOTEQUAL = GLushort{0x0205};
constexpr auto GL_NO_ERROR = GLushort{0};
constexpr auto GL_OBJECT_LINEAR = GLushort{0x2401};
constexpr auto GL_OBJECT_PLANE = GLushort{0x2501};
constexpr auto GL_ONE = GLushort{1};
constexpr auto GL_ONE_MINUS_DST_ALPHA = GLushort{0x0305};
constexpr auto GL_ONE_MINUS_DST_COLOR = GLushort{0x0307};
constexpr auto GL_ONE_MINUS_SRC_ALPHA = GLushort{0x0303};
constexpr auto GL_ONE_MINUS_SRC_COLOR = GLushort{0x0301};
constexpr auto GL_OR = GLushort{0x1507};
constexpr auto GL_ORDER = GLushort{0x0A01};
constexpr auto GL_OR_INVERTED = GLushort{0x150D};
constexpr auto GL_OR_REVERSE = GLushort{0x150B};
constexpr auto GL_OUT_OF_MEMORY = GLushort{0x0505};
constexpr auto GL_PACK_ALIGNMENT = GLushort{0x0D05};
constexpr auto GL_PACK_LSB_FIRST = GLushort{0x0D01};
constexpr auto GL_PACK_ROW_LENGTH = GLushort{0x0D02};
constexpr auto GL_PACK_SKIP_PIXELS = GLushort{0x0D04};
constexpr auto GL_PACK_SKIP_ROWS = GLushort{0x0D03};
constexpr auto GL_PACK_SWAP_BYTES = GLushort{0x0D00};
constexpr auto GL_PASS_THROUGH_TOKEN = GLushort{0x0700};
constexpr auto GL_PERSPECTIVE_CORRECTION_HINT = GLushort{0x0C50};
constexpr auto GL_PIXEL_MAP_A_TO_A = GLushort{0x0C79};
constexpr auto GL_PIXEL_MAP_A_TO_A_SIZE = GLushort{0x0CB9};
constexpr auto GL_PIXEL_MAP_B_TO_B = GLushort{0x0C78};
constexpr auto GL_PIXEL_MAP_B_TO_B_SIZE = GLushort{0x0CB8};
constexpr auto GL_PIXEL_MAP_G_TO_G = GLushort{0x0C77};
constexpr auto GL_PIXEL_MAP_G_TO_G_SIZE = GLushort{0x0CB7};
constexpr auto GL_PIXEL_MAP_I_TO_A = GLushort{0x0C75};
constexpr auto GL_PIXEL_MAP_I_TO_A_SIZE = GLushort{0x0CB5};
constexpr auto GL_PIXEL_MAP_I_TO_B = GLushort{0x0C74};
constexpr auto GL_PIXEL_MAP_I_TO_B_SIZE = GLushort{0x0CB4};
constexpr auto GL_PIXEL_MAP_I_TO_G = GLushort{0x0C73};
constexpr auto GL_PIXEL_MAP_I_TO_G_SIZE = GLushort{0x0CB3};
constexpr auto GL_PIXEL_MAP_I_TO_I = GLushort{0x0C70};
constexpr auto GL_PIXEL_MAP_I_TO_I_SIZE = GLushort{0x0CB0};
constexpr auto GL_PIXEL_MAP_I_TO_R = GLushort{0x0C72};
constexpr auto GL_PIXEL_MAP_I_TO_R_SIZE = GLushort{0x0CB2};
constexpr auto GL_PIXEL_MAP_R_TO_R = GLushort{0x0C76};
constexpr auto GL_PIXEL_MAP_R_TO_R_SIZE = GLushort{0x0CB6};
constexpr auto GL_PIXEL_MAP_S_TO_S = GLushort{0x0C71};
constexpr auto GL_PIXEL_MAP_S_TO_S_SIZE = GLushort{0x0CB1};
constexpr auto GL_POINT = GLushort{0x1B00};
constexpr auto GL_POINTS = GLushort{0x0000};
constexpr auto GL_POINT_SIZE = GLushort{0x0B11};
constexpr auto GL_POINT_SIZE_GRANULARITY = GLushort{0x0B13};
constexpr auto GL_POINT_SIZE_RANGE = GLushort{0x0B12};
constexpr auto GL_POINT_SMOOTH = GLushort{0x0B10};
constexpr auto GL_POINT_SMOOTH_HINT = GLushort{0x0C51};
constexpr auto GL_POINT_TOKEN = GLushort{0x0701};
constexpr auto GL_POLYGON = GLushort{0x0009};
constexpr auto GL_POLYGON_MODE = GLushort{0x0B40};
constexpr auto GL_POLYGON_SMOOTH = GLushort{0x0B41};
constexpr auto GL_POLYGON_SMOOTH_HINT = GLushort{0x0C53};
constexpr auto GL_POLYGON_STIPPLE = GLushort{0x0B42};
constexpr auto GL_POLYGON_TOKEN = GLushort{0x0703};
constexpr auto GL_POSITION = GLushort{0x1203};
constexpr auto GL_PROJECTION = GLushort{0x1701};
constexpr auto GL_PROJECTION_MATRIX = GLushort{0x0BA7};
constexpr auto GL_PROJECTION_STACK_DEPTH = GLushort{0x0BA4};
constexpr auto GL_Q = GLushort{0x2003};
constexpr auto GL_QUADRATIC_ATTENUATION = GLushort{0x1209};
constexpr auto GL_QUADS = GLushort{0x0007};
constexpr auto GL_QUAD_STRIP = GLushort{0x0008};
constexpr auto GL_R = GLushort{0x2002};
constexpr auto GL_READ_BUFFER = GLushort{0x0C02};
constexpr auto GL_RED = GLushort{0x1903};
constexpr auto GL_RED_BIAS = GLushort{0x0D15};
constexpr auto GL_RED_BITS = GLushort{0x0D52};
constexpr auto GL_RED_SCALE = GLushort{0x0D14};
constexpr auto GL_RENDER = GLushort{0x1C00};
constexpr auto GL_RENDERER = GLushort{0x1F01};
constexpr auto GL_RENDER_MODE = GLushort{0x0C40};
constexpr auto GL_REPEAT = GLushort{0x2901};
constexpr auto GL_REPLACE = GLushort{0x1E01};
constexpr auto GL_RETURN = GLushort{0x0102};
constexpr auto GL_RGB = GLushort{0x1907};
constexpr auto GL_RGBA = GLushort{0x1908};
constexpr auto GL_RGBA_MODE = GLushort{0x0C31};
constexpr auto GL_RIGHT = GLushort{0x0407};
constexpr auto GL_S = GLushort{0x2000};
constexpr auto GL_SCISSOR_BOX = GLushort{0x0C10};
constexpr auto GL_SCISSOR_TEST = GLushort{0x0C11};
constexpr auto GL_SELECT = GLushort{0x1C02};
constexpr auto GL_SET = GLushort{0x150F};
constexpr auto GL_SHADE_MODEL = GLushort{0x0B54};
constexpr auto GL_SHININESS = GLushort{0x1601};
constexpr auto GL_SHORT = GLushort{0x1402};
constexpr auto GL_SMOOTH = GLushort{0x1D01};
constexpr auto GL_SPECULAR = GLushort{0x1202};
constexpr auto GL_SPHERE_MAP = GLushort{0x2402};
constexpr auto GL_SPOT_CUTOFF = GLushort{0x1206};
constexpr auto GL_SPOT_DIRECTION = GLushort{0x1204};
constexpr auto GL_SPOT_EXPONENT = GLushort{0x1205};
constexpr auto GL_SRC_ALPHA = GLushort{0x0302};
constexpr auto GL_SRC_ALPHA_SATURATE = GLushort{0x0308};
constexpr auto GL_SRC_COLOR = GLushort{0x0300};
constexpr auto GL_STACK_OVERFLOW = GLushort{0x0503};
constexpr auto GL_STACK_UNDERFLOW = GLushort{0x0504};
constexpr auto GL_STENCIL = GLushort{0x1802};
constexpr auto GL_STENCIL_BITS = GLushort{0x0D57};
constexpr auto GL_STENCIL_CLEAR_VALUE = GLushort{0x0B91};
constexpr auto GL_STENCIL_FAIL = GLushort{0x0B94};
constexpr auto GL_STENCIL_FUNC = GLushort{0x0B92};
constexpr auto GL_STENCIL_INDEX = GLushort{0x1901};
constexpr auto GL_STENCIL_PASS_DEPTH_FAIL = GLushort{0x0B95};
constexpr auto GL_STENCIL_PASS_DEPTH_PASS = GLushort{0x0B96};
constexpr auto GL_STENCIL_REF = GLushort{0x0B97};
constexpr auto GL_STENCIL_TEST = GLushort{0x0B90};
constexpr auto GL_STENCIL_VALUE_MASK = GLushort{0x0B93};
constexpr auto GL_STENCIL_WRITEMASK = GLushort{0x0B98};
constexpr auto GL_STEREO = GLushort{0x0C33};
constexpr auto GL_SUBPIXEL_BITS = GLushort{0x0D50};
constexpr auto GL_T = GLushort{0x2001};
constexpr auto GL_TEXTURE = GLushort{0x1702};
constexpr auto GL_TEXTURE_1D = GLushort{0x0DE0};
constexpr auto GL_TEXTURE_2D = GLushort{0x0DE1};
constexpr auto GL_TEXTURE_BORDER = GLushort{0x1005};
constexpr auto GL_TEXTURE_BORDER_COLOR = GLushort{0x1004};
constexpr auto GL_TEXTURE_COMPONENTS = GLushort{0x1003};
constexpr auto GL_TEXTURE_ENV = GLushort{0x2300};
constexpr auto GL_TEXTURE_ENV_COLOR = GLushort{0x2201};
constexpr auto GL_TEXTURE_ENV_MODE = GLushort{0x2200};
constexpr auto GL_TEXTURE_GEN_MODE = GLushort{0x2500};
constexpr auto GL_TEXTURE_GEN_Q = GLushort{0x0C63};
constexpr auto GL_TEXTURE_GEN_R = GLushort{0x0C62};
constexpr auto GL_TEXTURE_GEN_S = GLushort{0x0C60};
constexpr auto GL_TEXTURE_GEN_T = GLushort{0x0C61};
constexpr auto GL_TEXTURE_HEIGHT = GLushort{0x1001};
constexpr auto GL_TEXTURE_MAG_FILTER = GLushort{0x2800};
constexpr auto GL_TEXTURE_MATRIX = GLushort{0x0BA8};
constexpr auto GL_TEXTURE_MIN_FILTER = GLushort{0x2801};
constexpr auto GL_TEXTURE_STACK_DEPTH = GLushort{0x0BA5};
constexpr auto GL_TEXTURE_WIDTH = GLushort{0x1000};
constexpr auto GL_TEXTURE_WRAP_S = GLushort{0x2802};
constexpr auto GL_TEXTURE_WRAP_T = GLushort{0x2803};
constexpr auto GL_TRIANGLES = GLushort{0x0004};
constexpr auto GL_TRIANGLE_FAN = GLushort{0x0006};
constexpr auto GL_TRIANGLE_STRIP = GLushort{0x0005};
constexpr auto GL_TRUE = GLushort{1};
constexpr auto GL_UNPACK_ALIGNMENT = GLushort{0x0CF5};
constexpr auto GL_UNPACK_LSB_FIRST = GLushort{0x0CF1};
constexpr auto GL_UNPACK_ROW_LENGTH = GLushort{0x0CF2};
constexpr auto GL_UNPACK_SKIP_PIXELS = GLushort{0x0CF4};
constexpr auto GL_UNPACK_SKIP_ROWS = GLushort{0x0CF3};
constexpr auto GL_UNPACK_SWAP_BYTES = GLushort{0x0CF0};
constexpr auto GL_UNSIGNED_BYTE = GLushort{0x1401};
constexpr auto GL_UNSIGNED_INT = GLushort{0x1405};
constexpr auto GL_UNSIGNED_SHORT = GLushort{0x1403};
constexpr auto GL_VENDOR = GLushort{0x1F00};
constexpr auto GL_VERSION = GLushort{0x1F02};
constexpr auto GL_VIEWPORT = GLushort{0x0BA2};
constexpr auto GL_XOR = GLushort{0x1506};
constexpr auto GL_ZERO = GLushort{0};
constexpr auto GL_ZOOM_X = GLushort{0x0D16};
constexpr auto GL_ZOOM_Y = GLushort{0x0D17};

constexpr auto GL_ACCUM_BUFFER_BIT = GLbitfield{0x00000200};
constexpr auto GL_ALL_ATTRIB_BITS = GLbitfield{0xFFFFFFFF};
constexpr auto GL_COLOR_BUFFER_BIT = GLbitfield{0x00004000};
constexpr auto GL_CURRENT_BIT = GLbitfield{0x00000001};
constexpr auto GL_DEPTH_BUFFER_BIT = GLbitfield{0x00000100};
constexpr auto GL_ENABLE_BIT = GLbitfield{0x00002000};
constexpr auto GL_EVAL_BIT = GLbitfield{0x00010000};
constexpr auto GL_FOG_BIT = GLbitfield{0x00000080};
constexpr auto GL_HINT_BIT = GLbitfield{0x00008000};
constexpr auto GL_LIGHTING_BIT = GLbitfield{0x00000040};
constexpr auto GL_LINE_BIT = GLbitfield{0x00000004};
constexpr auto GL_LIST_BIT = GLbitfield{0x00020000};
constexpr auto GL_PIXEL_MODE_BIT = GLbitfield{0x00000020};
constexpr auto GL_POINT_BIT = GLbitfield{0x00000002};
constexpr auto GL_POLYGON_BIT = GLbitfield{0x00000008};
constexpr auto GL_POLYGON_STIPPLE_BIT = GLbitfield{0x00000010};
constexpr auto GL_SCISSOR_BIT = GLbitfield{0x00080000};
constexpr auto GL_STENCIL_BUFFER_BIT = GLbitfield{0x00000400};
constexpr auto GL_TEXTURE_BIT = GLbitfield{0x00040000};
constexpr auto GL_TRANSFORM_BIT = GLbitfield{0x00001000};
constexpr auto GL_VIEWPORT_BIT = GLbitfield{0x00000800};


using PFNGLACCUMPROC = void (APIENTRY *)(GLenum op, GLfloat value);
using PFNGLALPHAFUNCPROC = void (APIENTRY *)(GLenum func, GLfloat ref);
using PFNGLBEGINPROC = void (APIENTRY *)(GLenum mode);
using PFNGLBITMAPPROC = void (APIENTRY *)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap);
using PFNGLBLENDFUNCPROC = void (APIENTRY *)(GLenum sfactor, GLenum dfactor);
using PFNGLCALLLISTPROC = void (APIENTRY *)(GLuint list);
using PFNGLCALLLISTSPROC = void (APIENTRY *)(GLsizei n, GLenum type, const void* lists);
using PFNGLCLEARPROC = void (APIENTRY *)(GLbitfield mask);
using PFNGLCLEARACCUMPROC = void (APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
using PFNGLCLEARCOLORPROC = void (APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
using PFNGLCLEARDEPTHPROC = void (APIENTRY *)(GLdouble depth);
using PFNGLCLEARINDEXPROC = void (APIENTRY *)(GLfloat c);
using PFNGLCLEARSTENCILPROC = void (APIENTRY *)(GLint s);
using PFNGLCLIPPLANEPROC = void (APIENTRY *)(GLenum plane, const GLdouble* equation);
using PFNGLCOLOR3BPROC = void (APIENTRY *)(GLbyte red, GLbyte green, GLbyte blue);
using PFNGLCOLOR3BVPROC = void (APIENTRY *)(const GLbyte* v);
using PFNGLCOLOR3DPROC = void (APIENTRY *)(GLdouble red, GLdouble green, GLdouble blue);
using PFNGLCOLOR3DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLCOLOR3FPROC = void (APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue);
using PFNGLCOLOR3FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLCOLOR3IPROC = void (APIENTRY *)(GLint red, GLint green, GLint blue);
using PFNGLCOLOR3IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLCOLOR3SPROC = void (APIENTRY *)(GLshort red, GLshort green, GLshort blue);
using PFNGLCOLOR3SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLCOLOR3UBPROC = void (APIENTRY *)(GLubyte red, GLubyte green, GLubyte blue);
using PFNGLCOLOR3UBVPROC = void (APIENTRY *)(const GLubyte* v);
using PFNGLCOLOR3UIPROC = void (APIENTRY *)(GLuint red, GLuint green, GLuint blue);
using PFNGLCOLOR3UIVPROC = void (APIENTRY *)(const GLuint* v);
using PFNGLCOLOR3USPROC = void (APIENTRY *)(GLushort red, GLushort green, GLushort blue);
using PFNGLCOLOR3USVPROC = void (APIENTRY *)(const GLushort* v);
using PFNGLCOLOR4BPROC = void (APIENTRY *)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
using PFNGLCOLOR4BVPROC = void (APIENTRY *)(const GLbyte* v);
using PFNGLCOLOR4DPROC = void (APIENTRY *)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
using PFNGLCOLOR4DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLCOLOR4FPROC = void (APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
using PFNGLCOLOR4FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLCOLOR4IPROC = void (APIENTRY *)(GLint red, GLint green, GLint blue, GLint alpha);
using PFNGLCOLOR4IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLCOLOR4SPROC = void (APIENTRY *)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
using PFNGLCOLOR4SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLCOLOR4UBPROC = void (APIENTRY *)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
using PFNGLCOLOR4UBVPROC = void (APIENTRY *)(const GLubyte* v);
using PFNGLCOLOR4UIPROC = void (APIENTRY *)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
using PFNGLCOLOR4UIVPROC = void (APIENTRY *)(const GLuint* v);
using PFNGLCOLOR4USPROC = void (APIENTRY *)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
using PFNGLCOLOR4USVPROC = void (APIENTRY *)(const GLushort* v);
using PFNGLCOLORMASKPROC = void (APIENTRY *)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
using PFNGLCOLORMATERIALPROC = void (APIENTRY *)(GLenum face, GLenum mode);
using PFNGLCOPYPIXELSPROC = void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
using PFNGLCULLFACEPROC = void (APIENTRY *)(GLenum mode);
using PFNGLDELETELISTSPROC = void (APIENTRY *)(GLuint list, GLsizei range);
using PFNGLDEPTHFUNCPROC = void (APIENTRY *)(GLenum func);
using PFNGLDEPTHMASKPROC = void (APIENTRY *)(GLboolean flag);
using PFNGLDEPTHRANGEPROC = void (APIENTRY *)(GLdouble n, GLdouble f);
using PFNGLDISABLEPROC = void (APIENTRY *)(GLenum cap);
using PFNGLDRAWBUFFERPROC = void (APIENTRY *)(GLenum buf);
using PFNGLDRAWPIXELSPROC = void (APIENTRY *)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
using PFNGLEDGEFLAGPROC = void (APIENTRY *)(GLboolean flag);
using PFNGLEDGEFLAGVPROC = void (APIENTRY *)(const GLboolean* flag);
using PFNGLENABLEPROC = void (APIENTRY *)(GLenum cap);
using PFNGLENDPROC = void (APIENTRY *)();
using PFNGLENDLISTPROC = void (APIENTRY *)();
using PFNGLEVALCOORD1DPROC = void (APIENTRY *)(GLdouble u);
using PFNGLEVALCOORD1DVPROC = void (APIENTRY *)(const GLdouble* u);
using PFNGLEVALCOORD1FPROC = void (APIENTRY *)(GLfloat u);
using PFNGLEVALCOORD1FVPROC = void (APIENTRY *)(const GLfloat* u);
using PFNGLEVALCOORD2DPROC = void (APIENTRY *)(GLdouble u, GLdouble v);
using PFNGLEVALCOORD2DVPROC = void (APIENTRY *)(const GLdouble* u);
using PFNGLEVALCOORD2FPROC = void (APIENTRY *)(GLfloat u, GLfloat v);
using PFNGLEVALCOORD2FVPROC = void (APIENTRY *)(const GLfloat* u);
using PFNGLEVALMESH1PROC = void (APIENTRY *)(GLenum mode, GLint i1, GLint i2);
using PFNGLEVALMESH2PROC = void (APIENTRY *)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
using PFNGLEVALPOINT1PROC = void (APIENTRY *)(GLint i);
using PFNGLEVALPOINT2PROC = void (APIENTRY *)(GLint i, GLint j);
using PFNGLFEEDBACKBUFFERPROC = void (APIENTRY *)(GLsizei size, GLenum type, GLfloat* buffer);
using PFNGLFINISHPROC = void (APIENTRY *)();
using PFNGLFLUSHPROC = void (APIENTRY *)();
using PFNGLFOGFPROC = void (APIENTRY *)(GLenum pname, GLfloat param);
using PFNGLFOGFVPROC = void (APIENTRY *)(GLenum pname, const GLfloat* params);
using PFNGLFOGIPROC = void (APIENTRY *)(GLenum pname, GLint param);
using PFNGLFOGIVPROC = void (APIENTRY *)(GLenum pname, const GLint* params);
using PFNGLFRONTFACEPROC = void (APIENTRY *)(GLenum mode);
using PFNGLFRUSTUMPROC = void (APIENTRY *)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
using PFNGLGENLISTSPROC = GLuint (APIENTRY *)(GLsizei range);
using PFNGLGETBOOLEANVPROC = void (APIENTRY *)(GLenum pname, GLboolean* data);
using PFNGLGETCLIPPLANEPROC = void (APIENTRY *)(GLenum plane, GLdouble* equation);
using PFNGLGETDOUBLEVPROC = void (APIENTRY *)(GLenum pname, GLdouble* data);
using PFNGLGETERRORPROC = GLenum (APIENTRY *)();
using PFNGLGETFLOATVPROC = void (APIENTRY *)(GLenum pname, GLfloat* data);
using PFNGLGETINTEGERVPROC = void (APIENTRY *)(GLenum pname, GLint* data);
using PFNGLGETLIGHTFVPROC = void (APIENTRY *)(GLenum light, GLenum pname, GLfloat* params);
using PFNGLGETLIGHTIVPROC = void (APIENTRY *)(GLenum light, GLenum pname, GLint* params);
using PFNGLGETMAPDVPROC = void (APIENTRY *)(GLenum target, GLenum query, GLdouble* v);
using PFNGLGETMAPFVPROC = void (APIENTRY *)(GLenum target, GLenum query, GLfloat* v);
using PFNGLGETMAPIVPROC = void (APIENTRY *)(GLenum target, GLenum query, GLint* v);
using PFNGLGETMATERIALFVPROC = void (APIENTRY *)(GLenum face, GLenum pname, GLfloat* params);
using PFNGLGETMATERIALIVPROC = void (APIENTRY *)(GLenum face, GLenum pname, GLint* params);
using PFNGLGETPIXELMAPFVPROC = void (APIENTRY *)(GLenum map, GLfloat* values);
using PFNGLGETPIXELMAPUIVPROC = void (APIENTRY *)(GLenum map, GLuint* values);
using PFNGLGETPIXELMAPUSVPROC = void (APIENTRY *)(GLenum map, GLushort* values);
using PFNGLGETPOLYGONSTIPPLEPROC = void (APIENTRY *)(GLubyte* mask);
using PFNGLGETSTRINGPROC = const GLubyte* (APIENTRY *)(GLenum name);
using PFNGLGETTEXENVFVPROC = void (APIENTRY *)(GLenum target, GLenum pname, GLfloat* params);
using PFNGLGETTEXENVIVPROC = void (APIENTRY *)(GLenum target, GLenum pname, GLint* params);
using PFNGLGETTEXGENDVPROC = void (APIENTRY *)(GLenum coord, GLenum pname, GLdouble* params);
using PFNGLGETTEXGENFVPROC = void (APIENTRY *)(GLenum coord, GLenum pname, GLfloat* params);
using PFNGLGETTEXGENIVPROC = void (APIENTRY *)(GLenum coord, GLenum pname, GLint* params);
using PFNGLGETTEXIMAGEPROC = void (APIENTRY *)(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
using PFNGLGETTEXLEVELPARAMETERFVPROC = void (APIENTRY *)(GLenum target, GLint level, GLenum pname, GLfloat* params);
using PFNGLGETTEXLEVELPARAMETERIVPROC = void (APIENTRY *)(GLenum target, GLint level, GLenum pname, GLint* params);
using PFNGLGETTEXPARAMETERFVPROC = void (APIENTRY *)(GLenum target, GLenum pname, GLfloat* params);
using PFNGLGETTEXPARAMETERIVPROC = void (APIENTRY *)(GLenum target, GLenum pname, GLint* params);
using PFNGLHINTPROC = void (APIENTRY *)(GLenum target, GLenum mode);
using PFNGLINDEXMASKPROC = void (APIENTRY *)(GLuint mask);
using PFNGLINDEXDPROC = void (APIENTRY *)(GLdouble c);
using PFNGLINDEXDVPROC = void (APIENTRY *)(const GLdouble* c);
using PFNGLINDEXFPROC = void (APIENTRY *)(GLfloat c);
using PFNGLINDEXFVPROC = void (APIENTRY *)(const GLfloat* c);
using PFNGLINDEXIPROC = void (APIENTRY *)(GLint c);
using PFNGLINDEXIVPROC = void (APIENTRY *)(const GLint* c);
using PFNGLINDEXSPROC = void (APIENTRY *)(GLshort c);
using PFNGLINDEXSVPROC = void (APIENTRY *)(const GLshort* c);
using PFNGLINITNAMESPROC = void (APIENTRY *)();
using PFNGLISENABLEDPROC = GLboolean (APIENTRY *)(GLenum cap);
using PFNGLISLISTPROC = GLboolean (APIENTRY *)(GLuint list);
using PFNGLLIGHTMODELFPROC = void (APIENTRY *)(GLenum pname, GLfloat param);
using PFNGLLIGHTMODELFVPROC = void (APIENTRY *)(GLenum pname, const GLfloat* params);
using PFNGLLIGHTMODELIPROC = void (APIENTRY *)(GLenum pname, GLint param);
using PFNGLLIGHTMODELIVPROC = void (APIENTRY *)(GLenum pname, const GLint* params);
using PFNGLLIGHTFPROC = void (APIENTRY *)(GLenum light, GLenum pname, GLfloat param);
using PFNGLLIGHTFVPROC = void (APIENTRY *)(GLenum light, GLenum pname, const GLfloat* params);
using PFNGLLIGHTIPROC = void (APIENTRY *)(GLenum light, GLenum pname, GLint param);
using PFNGLLIGHTIVPROC = void (APIENTRY *)(GLenum light, GLenum pname, const GLint* params);
using PFNGLLINESTIPPLEPROC = void (APIENTRY *)(GLint factor, GLushort pattern);
using PFNGLLINEWIDTHPROC = void (APIENTRY *)(GLfloat width);
using PFNGLLISTBASEPROC = void (APIENTRY *)(GLuint base);
using PFNGLLOADIDENTITYPROC = void (APIENTRY *)();
using PFNGLLOADMATRIXDPROC = void (APIENTRY *)(const GLdouble* m);
using PFNGLLOADMATRIXFPROC = void (APIENTRY *)(const GLfloat* m);
using PFNGLLOADNAMEPROC = void (APIENTRY *)(GLuint name);
using PFNGLLOGICOPPROC = void (APIENTRY *)(GLenum opcode);
using PFNGLMAP1DPROC = void (APIENTRY *)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
using PFNGLMAP1FPROC = void (APIENTRY *)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
using PFNGLMAP2DPROC = void (APIENTRY *)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
using PFNGLMAP2FPROC = void (APIENTRY *)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
using PFNGLMAPGRID1DPROC = void (APIENTRY *)(GLint un, GLdouble u1, GLdouble u2);
using PFNGLMAPGRID1FPROC = void (APIENTRY *)(GLint un, GLfloat u1, GLfloat u2);
using PFNGLMAPGRID2DPROC = void (APIENTRY *)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
using PFNGLMAPGRID2FPROC = void (APIENTRY *)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
using PFNGLMATERIALFPROC = void (APIENTRY *)(GLenum face, GLenum pname, GLfloat param);
using PFNGLMATERIALFVPROC = void (APIENTRY *)(GLenum face, GLenum pname, const GLfloat* params);
using PFNGLMATERIALIPROC = void (APIENTRY *)(GLenum face, GLenum pname, GLint param);
using PFNGLMATERIALIVPROC = void (APIENTRY *)(GLenum face, GLenum pname, const GLint* params);
using PFNGLMATRIXMODEPROC = void (APIENTRY *)(GLenum mode);
using PFNGLMULTMATRIXDPROC = void (APIENTRY *)(const GLdouble* m);
using PFNGLMULTMATRIXFPROC = void (APIENTRY *)(const GLfloat* m);
using PFNGLNEWLISTPROC = void (APIENTRY *)(GLuint list, GLenum mode);
using PFNGLNORMAL3BPROC = void (APIENTRY *)(GLbyte nx, GLbyte ny, GLbyte nz);
using PFNGLNORMAL3BVPROC = void (APIENTRY *)(const GLbyte* v);
using PFNGLNORMAL3DPROC = void (APIENTRY *)(GLdouble nx, GLdouble ny, GLdouble nz);
using PFNGLNORMAL3DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLNORMAL3FPROC = void (APIENTRY *)(GLfloat nx, GLfloat ny, GLfloat nz);
using PFNGLNORMAL3FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLNORMAL3IPROC = void (APIENTRY *)(GLint nx, GLint ny, GLint nz);
using PFNGLNORMAL3IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLNORMAL3SPROC = void (APIENTRY *)(GLshort nx, GLshort ny, GLshort nz);
using PFNGLNORMAL3SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLORTHOPROC = void (APIENTRY *)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
using PFNGLPASSTHROUGHPROC = void (APIENTRY *)(GLfloat token);
using PFNGLPIXELMAPFVPROC = void (APIENTRY *)(GLenum map, GLsizei mapsize, const GLfloat* values);
using PFNGLPIXELMAPUIVPROC = void (APIENTRY *)(GLenum map, GLsizei mapsize, const GLuint* values);
using PFNGLPIXELMAPUSVPROC = void (APIENTRY *)(GLenum map, GLsizei mapsize, const GLushort* values);
using PFNGLPIXELSTOREFPROC = void (APIENTRY *)(GLenum pname, GLfloat param);
using PFNGLPIXELSTOREIPROC = void (APIENTRY *)(GLenum pname, GLint param);
using PFNGLPIXELTRANSFERFPROC = void (APIENTRY *)(GLenum pname, GLfloat param);
using PFNGLPIXELTRANSFERIPROC = void (APIENTRY *)(GLenum pname, GLint param);
using PFNGLPIXELZOOMPROC = void (APIENTRY *)(GLfloat xfactor, GLfloat yfactor);
using PFNGLPOINTSIZEPROC = void (APIENTRY *)(GLfloat size);
using PFNGLPOLYGONMODEPROC = void (APIENTRY *)(GLenum face, GLenum mode);
using PFNGLPOLYGONSTIPPLEPROC = void (APIENTRY *)(const GLubyte* mask);
using PFNGLPOPATTRIBPROC = void (APIENTRY *)();
using PFNGLPOPMATRIXPROC = void (APIENTRY *)();
using PFNGLPOPNAMEPROC = void (APIENTRY *)();
using PFNGLPUSHATTRIBPROC = void (APIENTRY *)(GLbitfield mask);
using PFNGLPUSHMATRIXPROC = void (APIENTRY *)();
using PFNGLPUSHNAMEPROC = void (APIENTRY *)(GLuint name);
using PFNGLRASTERPOS2DPROC = void (APIENTRY *)(GLdouble x, GLdouble y);
using PFNGLRASTERPOS2DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLRASTERPOS2FPROC = void (APIENTRY *)(GLfloat x, GLfloat y);
using PFNGLRASTERPOS2FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLRASTERPOS2IPROC = void (APIENTRY *)(GLint x, GLint y);
using PFNGLRASTERPOS2IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLRASTERPOS2SPROC = void (APIENTRY *)(GLshort x, GLshort y);
using PFNGLRASTERPOS2SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLRASTERPOS3DPROC = void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z);
using PFNGLRASTERPOS3DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLRASTERPOS3FPROC = void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z);
using PFNGLRASTERPOS3FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLRASTERPOS3IPROC = void (APIENTRY *)(GLint x, GLint y, GLint z);
using PFNGLRASTERPOS3IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLRASTERPOS3SPROC = void (APIENTRY *)(GLshort x, GLshort y, GLshort z);
using PFNGLRASTERPOS3SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLRASTERPOS4DPROC = void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
using PFNGLRASTERPOS4DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLRASTERPOS4FPROC = void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
using PFNGLRASTERPOS4FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLRASTERPOS4IPROC = void (APIENTRY *)(GLint x, GLint y, GLint z, GLint w);
using PFNGLRASTERPOS4IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLRASTERPOS4SPROC = void (APIENTRY *)(GLshort x, GLshort y, GLshort z, GLshort w);
using PFNGLRASTERPOS4SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLREADBUFFERPROC = void (APIENTRY *)(GLenum src);
using PFNGLREADPIXELSPROC = void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
using PFNGLRECTDPROC = void (APIENTRY *)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
using PFNGLRECTDVPROC = void (APIENTRY *)(const GLdouble* v1, const GLdouble* v2);
using PFNGLRECTFPROC = void (APIENTRY *)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
using PFNGLRECTFVPROC = void (APIENTRY *)(const GLfloat* v1, const GLfloat* v2);
using PFNGLRECTIPROC = void (APIENTRY *)(GLint x1, GLint y1, GLint x2, GLint y2);
using PFNGLRECTIVPROC = void (APIENTRY *)(const GLint* v1, const GLint* v2);
using PFNGLRECTSPROC = void (APIENTRY *)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
using PFNGLRECTSVPROC = void (APIENTRY *)(const GLshort* v1, const GLshort* v2);
using PFNGLRENDERMODEPROC = GLint (APIENTRY *)(GLenum mode);
using PFNGLROTATEDPROC = void (APIENTRY *)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
using PFNGLROTATEFPROC = void (APIENTRY *)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
using PFNGLSCALEDPROC = void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z);
using PFNGLSCALEFPROC = void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z);
using PFNGLSCISSORPROC = void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height);
using PFNGLSELECTBUFFERPROC = void (APIENTRY *)(GLsizei size, GLuint* buffer);
using PFNGLSHADEMODELPROC = void (APIENTRY *)(GLenum mode);
using PFNGLSTENCILFUNCPROC = void (APIENTRY *)(GLenum func, GLint ref, GLuint mask);
using PFNGLSTENCILMASKPROC = void (APIENTRY *)(GLuint mask);
using PFNGLSTENCILOPPROC = void (APIENTRY *)(GLenum fail, GLenum zfail, GLenum zpass);
using PFNGLTEXCOORD1DPROC = void (APIENTRY *)(GLdouble s);
using PFNGLTEXCOORD1DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLTEXCOORD1FPROC = void (APIENTRY *)(GLfloat s);
using PFNGLTEXCOORD1FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLTEXCOORD1IPROC = void (APIENTRY *)(GLint s);
using PFNGLTEXCOORD1IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLTEXCOORD1SPROC = void (APIENTRY *)(GLshort s);
using PFNGLTEXCOORD1SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLTEXCOORD2DPROC = void (APIENTRY *)(GLdouble s, GLdouble t);
using PFNGLTEXCOORD2DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLTEXCOORD2FPROC = void (APIENTRY *)(GLfloat s, GLfloat t);
using PFNGLTEXCOORD2FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLTEXCOORD2IPROC = void (APIENTRY *)(GLint s, GLint t);
using PFNGLTEXCOORD2IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLTEXCOORD2SPROC = void (APIENTRY *)(GLshort s, GLshort t);
using PFNGLTEXCOORD2SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLTEXCOORD3DPROC = void (APIENTRY *)(GLdouble s, GLdouble t, GLdouble r);
using PFNGLTEXCOORD3DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLTEXCOORD3FPROC = void (APIENTRY *)(GLfloat s, GLfloat t, GLfloat r);
using PFNGLTEXCOORD3FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLTEXCOORD3IPROC = void (APIENTRY *)(GLint s, GLint t, GLint r);
using PFNGLTEXCOORD3IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLTEXCOORD3SPROC = void (APIENTRY *)(GLshort s, GLshort t, GLshort r);
using PFNGLTEXCOORD3SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLTEXCOORD4DPROC = void (APIENTRY *)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
using PFNGLTEXCOORD4DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLTEXCOORD4FPROC = void (APIENTRY *)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
using PFNGLTEXCOORD4FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLTEXCOORD4IPROC = void (APIENTRY *)(GLint s, GLint t, GLint r, GLint q);
using PFNGLTEXCOORD4IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLTEXCOORD4SPROC = void (APIENTRY *)(GLshort s, GLshort t, GLshort r, GLshort q);
using PFNGLTEXCOORD4SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLTEXENVFPROC = void (APIENTRY *)(GLenum target, GLenum pname, GLfloat param);
using PFNGLTEXENVFVPROC = void (APIENTRY *)(GLenum target, GLenum pname, const GLfloat* params);
using PFNGLTEXENVIPROC = void (APIENTRY *)(GLenum target, GLenum pname, GLint param);
using PFNGLTEXENVIVPROC = void (APIENTRY *)(GLenum target, GLenum pname, const GLint* params);
using PFNGLTEXGENDPROC = void (APIENTRY *)(GLenum coord, GLenum pname, GLdouble param);
using PFNGLTEXGENDVPROC = void (APIENTRY *)(GLenum coord, GLenum pname, const GLdouble* params);
using PFNGLTEXGENFPROC = void (APIENTRY *)(GLenum coord, GLenum pname, GLfloat param);
using PFNGLTEXGENFVPROC = void (APIENTRY *)(GLenum coord, GLenum pname, const GLfloat* params);
using PFNGLTEXGENIPROC = void (APIENTRY *)(GLenum coord, GLenum pname, GLint param);
using PFNGLTEXGENIVPROC = void (APIENTRY *)(GLenum coord, GLenum pname, const GLint* params);
using PFNGLTEXIMAGE1DPROC = void (APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
using PFNGLTEXIMAGE2DPROC = void (APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
using PFNGLTEXPARAMETERFPROC = void (APIENTRY *)(GLenum target, GLenum pname, GLfloat param);
using PFNGLTEXPARAMETERFVPROC = void (APIENTRY *)(GLenum target, GLenum pname, const GLfloat* params);
using PFNGLTEXPARAMETERIPROC = void (APIENTRY *)(GLenum target, GLenum pname, GLint param);
using PFNGLTEXPARAMETERIVPROC = void (APIENTRY *)(GLenum target, GLenum pname, const GLint* params);
using PFNGLTRANSLATEDPROC = void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z);
using PFNGLTRANSLATEFPROC = void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z);
using PFNGLVERTEX2DPROC = void (APIENTRY *)(GLdouble x, GLdouble y);
using PFNGLVERTEX2DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLVERTEX2FPROC = void (APIENTRY *)(GLfloat x, GLfloat y);
using PFNGLVERTEX2FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLVERTEX2IPROC = void (APIENTRY *)(GLint x, GLint y);
using PFNGLVERTEX2IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLVERTEX2SPROC = void (APIENTRY *)(GLshort x, GLshort y);
using PFNGLVERTEX2SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLVERTEX3DPROC = void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z);
using PFNGLVERTEX3DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLVERTEX3FPROC = void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z);
using PFNGLVERTEX3FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLVERTEX3IPROC = void (APIENTRY *)(GLint x, GLint y, GLint z);
using PFNGLVERTEX3IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLVERTEX3SPROC = void (APIENTRY *)(GLshort x, GLshort y, GLshort z);
using PFNGLVERTEX3SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLVERTEX4DPROC = void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
using PFNGLVERTEX4DVPROC = void (APIENTRY *)(const GLdouble* v);
using PFNGLVERTEX4FPROC = void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
using PFNGLVERTEX4FVPROC = void (APIENTRY *)(const GLfloat* v);
using PFNGLVERTEX4IPROC = void (APIENTRY *)(GLint x, GLint y, GLint z, GLint w);
using PFNGLVERTEX4IVPROC = void (APIENTRY *)(const GLint* v);
using PFNGLVERTEX4SPROC = void (APIENTRY *)(GLshort x, GLshort y, GLshort z, GLshort w);
using PFNGLVERTEX4SVPROC = void (APIENTRY *)(const GLshort* v);
using PFNGLVIEWPORTPROC = void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height);


GLAPI void APIENTRY glAccum(GLenum op, GLfloat value);
GLAPI void APIENTRY glAlphaFunc(GLenum func, GLfloat ref);
GLAPI void APIENTRY glBegin(GLenum mode);
GLAPI void APIENTRY glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap);
GLAPI void APIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor);
GLAPI void APIENTRY glCallList(GLuint list);
GLAPI void APIENTRY glCallLists(GLsizei n, GLenum type, const void* lists);
GLAPI void APIENTRY glClear(GLbitfield mask);
GLAPI void APIENTRY glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI void APIENTRY glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI void APIENTRY glClearDepth(GLdouble depth);
GLAPI void APIENTRY glClearIndex(GLfloat c);
GLAPI void APIENTRY glClearStencil(GLint s);
GLAPI void APIENTRY glClipPlane(GLenum plane, const GLdouble* equation);
GLAPI void APIENTRY glColor3b(GLbyte red, GLbyte green, GLbyte blue);
GLAPI void APIENTRY glColor3bv(const GLbyte* v);
GLAPI void APIENTRY glColor3d(GLdouble red, GLdouble green, GLdouble blue);
GLAPI void APIENTRY glColor3dv(const GLdouble* v);
GLAPI void APIENTRY glColor3f(GLfloat red, GLfloat green, GLfloat blue);
GLAPI void APIENTRY glColor3fv(const GLfloat* v);
GLAPI void APIENTRY glColor3i(GLint red, GLint green, GLint blue);
GLAPI void APIENTRY glColor3iv(const GLint* v);
GLAPI void APIENTRY glColor3s(GLshort red, GLshort green, GLshort blue);
GLAPI void APIENTRY glColor3sv(const GLshort* v);
GLAPI void APIENTRY glColor3ub(GLubyte red, GLubyte green, GLubyte blue);
GLAPI void APIENTRY glColor3ubv(const GLubyte* v);
GLAPI void APIENTRY glColor3ui(GLuint red, GLuint green, GLuint blue);
GLAPI void APIENTRY glColor3uiv(const GLuint* v);
GLAPI void APIENTRY glColor3us(GLushort red, GLushort green, GLushort blue);
GLAPI void APIENTRY glColor3usv(const GLushort* v);
GLAPI void APIENTRY glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
GLAPI void APIENTRY glColor4bv(const GLbyte* v);
GLAPI void APIENTRY glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
GLAPI void APIENTRY glColor4dv(const GLdouble* v);
GLAPI void APIENTRY glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI void APIENTRY glColor4fv(const GLfloat* v);
GLAPI void APIENTRY glColor4i(GLint red, GLint green, GLint blue, GLint alpha);
GLAPI void APIENTRY glColor4iv(const GLint* v);
GLAPI void APIENTRY glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
GLAPI void APIENTRY glColor4sv(const GLshort* v);
GLAPI void APIENTRY glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
GLAPI void APIENTRY glColor4ubv(const GLubyte* v);
GLAPI void APIENTRY glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
GLAPI void APIENTRY glColor4uiv(const GLuint* v);
GLAPI void APIENTRY glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
GLAPI void APIENTRY glColor4usv(const GLushort* v);
GLAPI void APIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI void APIENTRY glColorMaterial(GLenum face, GLenum mode);
GLAPI void APIENTRY glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
GLAPI void APIENTRY glCullFace(GLenum mode);
GLAPI void APIENTRY glDeleteLists(GLuint list, GLsizei range);
GLAPI void APIENTRY glDepthFunc(GLenum func);
GLAPI void APIENTRY glDepthMask(GLboolean flag);
GLAPI void APIENTRY glDepthRange(GLdouble n, GLdouble f);
GLAPI void APIENTRY glDisable(GLenum cap);
GLAPI void APIENTRY glDrawBuffer(GLenum buf);
GLAPI void APIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
GLAPI void APIENTRY glEdgeFlag(GLboolean flag);
GLAPI void APIENTRY glEdgeFlagv(const GLboolean* flag);
GLAPI void APIENTRY glEnable(GLenum cap);
GLAPI void APIENTRY glEnd();
GLAPI void APIENTRY glEndList();
GLAPI void APIENTRY glEvalCoord1d(GLdouble u);
GLAPI void APIENTRY glEvalCoord1dv(const GLdouble* u);
GLAPI void APIENTRY glEvalCoord1f(GLfloat u);
GLAPI void APIENTRY glEvalCoord1fv(const GLfloat* u);
GLAPI void APIENTRY glEvalCoord2d(GLdouble u, GLdouble v);
GLAPI void APIENTRY glEvalCoord2dv(const GLdouble* u);
GLAPI void APIENTRY glEvalCoord2f(GLfloat u, GLfloat v);
GLAPI void APIENTRY glEvalCoord2fv(const GLfloat* u);
GLAPI void APIENTRY glEvalMesh1(GLenum mode, GLint i1, GLint i2);
GLAPI void APIENTRY glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
GLAPI void APIENTRY glEvalPoint1(GLint i);
GLAPI void APIENTRY glEvalPoint2(GLint i, GLint j);
GLAPI void APIENTRY glFeedbackBuffer(GLsizei size, GLenum type, GLfloat* buffer);
GLAPI void APIENTRY glFinish();
GLAPI void APIENTRY glFlush();
GLAPI void APIENTRY glFogf(GLenum pname, GLfloat param);
GLAPI void APIENTRY glFogfv(GLenum pname, const GLfloat* params);
GLAPI void APIENTRY glFogi(GLenum pname, GLint param);
GLAPI void APIENTRY glFogiv(GLenum pname, const GLint* params);
GLAPI void APIENTRY glFrontFace(GLenum mode);
GLAPI void APIENTRY glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLAPI GLuint APIENTRY glGenLists(GLsizei range);
GLAPI void APIENTRY glGetBooleanv(GLenum pname, GLboolean* data);
GLAPI void APIENTRY glGetClipPlane(GLenum plane, GLdouble* equation);
GLAPI void APIENTRY glGetDoublev(GLenum pname, GLdouble* data);
GLAPI GLenum APIENTRY glGetError();
GLAPI void APIENTRY glGetFloatv(GLenum pname, GLfloat* data);
GLAPI void APIENTRY glGetIntegerv(GLenum pname, GLint* data);
GLAPI void APIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat* params);
GLAPI void APIENTRY glGetLightiv(GLenum light, GLenum pname, GLint* params);
GLAPI void APIENTRY glGetMapdv(GLenum target, GLenum query, GLdouble* v);
GLAPI void APIENTRY glGetMapfv(GLenum target, GLenum query, GLfloat* v);
GLAPI void APIENTRY glGetMapiv(GLenum target, GLenum query, GLint* v);
GLAPI void APIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat* params);
GLAPI void APIENTRY glGetMaterialiv(GLenum face, GLenum pname, GLint* params);
GLAPI void APIENTRY glGetPixelMapfv(GLenum map, GLfloat* values);
GLAPI void APIENTRY glGetPixelMapuiv(GLenum map, GLuint* values);
GLAPI void APIENTRY glGetPixelMapusv(GLenum map, GLushort* values);
GLAPI void APIENTRY glGetPolygonStipple(GLubyte* mask);
GLAPI const GLubyte* glGetString(GLenum name);
GLAPI void APIENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat* params);
GLAPI void APIENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint* params);
GLAPI void APIENTRY glGetTexGendv(GLenum coord, GLenum pname, GLdouble* params);
GLAPI void APIENTRY glGetTexGenfv(GLenum coord, GLenum pname, GLfloat* params);
GLAPI void APIENTRY glGetTexGeniv(GLenum coord, GLenum pname, GLint* params);
GLAPI void APIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
GLAPI void APIENTRY glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat* params);
GLAPI void APIENTRY glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint* params);
GLAPI void APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat* params);
GLAPI void APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint* params);
GLAPI void APIENTRY glHint(GLenum target, GLenum mode);
GLAPI void APIENTRY glIndexMask(GLuint mask);
GLAPI void APIENTRY glIndexd(GLdouble c);
GLAPI void APIENTRY glIndexdv(const GLdouble* c);
GLAPI void APIENTRY glIndexf(GLfloat c);
GLAPI void APIENTRY glIndexfv(const GLfloat* c);
GLAPI void APIENTRY glIndexi(GLint c);
GLAPI void APIENTRY glIndexiv(const GLint* c);
GLAPI void APIENTRY glIndexs(GLshort c);
GLAPI void APIENTRY glIndexsv(const GLshort* c);
GLAPI void APIENTRY glInitNames();
GLAPI GLboolean APIENTRY glIsEnabled(GLenum cap);
GLAPI GLboolean APIENTRY glIsList(GLuint list);
GLAPI void APIENTRY glLightModelf(GLenum pname, GLfloat param);
GLAPI void APIENTRY glLightModelfv(GLenum pname, const GLfloat* params);
GLAPI void APIENTRY glLightModeli(GLenum pname, GLint param);
GLAPI void APIENTRY glLightModeliv(GLenum pname, const GLint* params);
GLAPI void APIENTRY glLightf(GLenum light, GLenum pname, GLfloat param);
GLAPI void APIENTRY glLightfv(GLenum light, GLenum pname, const GLfloat* params);
GLAPI void APIENTRY glLighti(GLenum light, GLenum pname, GLint param);
GLAPI void APIENTRY glLightiv(GLenum light, GLenum pname, const GLint* params);
GLAPI void APIENTRY glLineStipple(GLint factor, GLushort pattern);
GLAPI void APIENTRY glLineWidth(GLfloat width);
GLAPI void APIENTRY glListBase(GLuint base);
GLAPI void APIENTRY glLoadIdentity();
GLAPI void APIENTRY glLoadMatrixd(const GLdouble* m);
GLAPI void APIENTRY glLoadMatrixf(const GLfloat* m);
GLAPI void APIENTRY glLoadName(GLuint name);
GLAPI void APIENTRY glLogicOp(GLenum opcode);
GLAPI void APIENTRY glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
GLAPI void APIENTRY glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
GLAPI void APIENTRY glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
GLAPI void APIENTRY glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
GLAPI void APIENTRY glMapGrid1d(GLint un, GLdouble u1, GLdouble u2);
GLAPI void APIENTRY glMapGrid1f(GLint un, GLfloat u1, GLfloat u2);
GLAPI void APIENTRY glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
GLAPI void APIENTRY glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
GLAPI void APIENTRY glMaterialf(GLenum face, GLenum pname, GLfloat param);
GLAPI void APIENTRY glMaterialfv(GLenum face, GLenum pname, const GLfloat* params);
GLAPI void APIENTRY glMateriali(GLenum face, GLenum pname, GLint param);
GLAPI void APIENTRY glMaterialiv(GLenum face, GLenum pname, const GLint* params);
GLAPI void APIENTRY glMatrixMode(GLenum mode);
GLAPI void APIENTRY glMultMatrixd(const GLdouble* m);
GLAPI void APIENTRY glMultMatrixf(const GLfloat* m);
GLAPI void APIENTRY glNewList(GLuint list, GLenum mode);
GLAPI void APIENTRY glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz);
GLAPI void APIENTRY glNormal3bv(const GLbyte* v);
GLAPI void APIENTRY glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz);
GLAPI void APIENTRY glNormal3dv(const GLdouble* v);
GLAPI void APIENTRY glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);
GLAPI void APIENTRY glNormal3fv(const GLfloat* v);
GLAPI void APIENTRY glNormal3i(GLint nx, GLint ny, GLint nz);
GLAPI void APIENTRY glNormal3iv(const GLint* v);
GLAPI void APIENTRY glNormal3s(GLshort nx, GLshort ny, GLshort nz);
GLAPI void APIENTRY glNormal3sv(const GLshort* v);
GLAPI void APIENTRY glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLAPI void APIENTRY glPassThrough(GLfloat token);
GLAPI void APIENTRY glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat* values);
GLAPI void APIENTRY glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint* values);
GLAPI void APIENTRY glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort* values);
GLAPI void APIENTRY glPixelStoref(GLenum pname, GLfloat param);
GLAPI void APIENTRY glPixelStorei(GLenum pname, GLint param);
GLAPI void APIENTRY glPixelTransferf(GLenum pname, GLfloat param);
GLAPI void APIENTRY glPixelTransferi(GLenum pname, GLint param);
GLAPI void APIENTRY glPixelZoom(GLfloat xfactor, GLfloat yfactor);
GLAPI void APIENTRY glPointSize(GLfloat size);
GLAPI void APIENTRY glPolygonMode(GLenum face, GLenum mode);
GLAPI void APIENTRY glPolygonStipple(const GLubyte* mask);
GLAPI void APIENTRY glPopAttrib();
GLAPI void APIENTRY glPopMatrix();
GLAPI void APIENTRY glPopName();
GLAPI void APIENTRY glPushAttrib(GLbitfield mask);
GLAPI void APIENTRY glPushMatrix();
GLAPI void APIENTRY glPushName(GLuint name);
GLAPI void APIENTRY glRasterPos2d(GLdouble x, GLdouble y);
GLAPI void APIENTRY glRasterPos2dv(const GLdouble* v);
GLAPI void APIENTRY glRasterPos2f(GLfloat x, GLfloat y);
GLAPI void APIENTRY glRasterPos2fv(const GLfloat* v);
GLAPI void APIENTRY glRasterPos2i(GLint x, GLint y);
GLAPI void APIENTRY glRasterPos2iv(const GLint* v);
GLAPI void APIENTRY glRasterPos2s(GLshort x, GLshort y);
GLAPI void APIENTRY glRasterPos2sv(const GLshort* v);
GLAPI void APIENTRY glRasterPos3d(GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glRasterPos3dv(const GLdouble* v);
GLAPI void APIENTRY glRasterPos3f(GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glRasterPos3fv(const GLfloat* v);
GLAPI void APIENTRY glRasterPos3i(GLint x, GLint y, GLint z);
GLAPI void APIENTRY glRasterPos3iv(const GLint* v);
GLAPI void APIENTRY glRasterPos3s(GLshort x, GLshort y, GLshort z);
GLAPI void APIENTRY glRasterPos3sv(const GLshort* v);
GLAPI void APIENTRY glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI void APIENTRY glRasterPos4dv(const GLdouble* v);
GLAPI void APIENTRY glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI void APIENTRY glRasterPos4fv(const GLfloat* v);
GLAPI void APIENTRY glRasterPos4i(GLint x, GLint y, GLint z, GLint w);
GLAPI void APIENTRY glRasterPos4iv(const GLint* v);
GLAPI void APIENTRY glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI void APIENTRY glRasterPos4sv(const GLshort* v);
GLAPI void APIENTRY glReadBuffer(GLenum src);
GLAPI void APIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
GLAPI void APIENTRY glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
GLAPI void APIENTRY glRectdv(const GLdouble* v1, const GLdouble* v2);
GLAPI void APIENTRY glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
GLAPI void APIENTRY glRectfv(const GLfloat* v1, const GLfloat* v2);
GLAPI void APIENTRY glRecti(GLint x1, GLint y1, GLint x2, GLint y2);
GLAPI void APIENTRY glRectiv(const GLint* v1, const GLint* v2);
GLAPI void APIENTRY glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
GLAPI void APIENTRY glRectsv(const GLshort* v1, const GLshort* v2);
GLAPI GLint APIENTRY glRenderMode(GLenum mode);
GLAPI void APIENTRY glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glScaled(GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glScalef(GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glSelectBuffer(GLsizei size, GLuint* buffer);
GLAPI void APIENTRY glShadeModel(GLenum mode);
GLAPI void APIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask);
GLAPI void APIENTRY glStencilMask(GLuint mask);
GLAPI void APIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
GLAPI void APIENTRY glTexCoord1d(GLdouble s);
GLAPI void APIENTRY glTexCoord1dv(const GLdouble* v);
GLAPI void APIENTRY glTexCoord1f(GLfloat s);
GLAPI void APIENTRY glTexCoord1fv(const GLfloat* v);
GLAPI void APIENTRY glTexCoord1i(GLint s);
GLAPI void APIENTRY glTexCoord1iv(const GLint* v);
GLAPI void APIENTRY glTexCoord1s(GLshort s);
GLAPI void APIENTRY glTexCoord1sv(const GLshort* v);
GLAPI void APIENTRY glTexCoord2d(GLdouble s, GLdouble t);
GLAPI void APIENTRY glTexCoord2dv(const GLdouble* v);
GLAPI void APIENTRY glTexCoord2f(GLfloat s, GLfloat t);
GLAPI void APIENTRY glTexCoord2fv(const GLfloat* v);
GLAPI void APIENTRY glTexCoord2i(GLint s, GLint t);
GLAPI void APIENTRY glTexCoord2iv(const GLint* v);
GLAPI void APIENTRY glTexCoord2s(GLshort s, GLshort t);
GLAPI void APIENTRY glTexCoord2sv(const GLshort* v);
GLAPI void APIENTRY glTexCoord3d(GLdouble s, GLdouble t, GLdouble r);
GLAPI void APIENTRY glTexCoord3dv(const GLdouble* v);
GLAPI void APIENTRY glTexCoord3f(GLfloat s, GLfloat t, GLfloat r);
GLAPI void APIENTRY glTexCoord3fv(const GLfloat* v);
GLAPI void APIENTRY glTexCoord3i(GLint s, GLint t, GLint r);
GLAPI void APIENTRY glTexCoord3iv(const GLint* v);
GLAPI void APIENTRY glTexCoord3s(GLshort s, GLshort t, GLshort r);
GLAPI void APIENTRY glTexCoord3sv(const GLshort* v);
GLAPI void APIENTRY glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
GLAPI void APIENTRY glTexCoord4dv(const GLdouble* v);
GLAPI void APIENTRY glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
GLAPI void APIENTRY glTexCoord4fv(const GLfloat* v);
GLAPI void APIENTRY glTexCoord4i(GLint s, GLint t, GLint r, GLint q);
GLAPI void APIENTRY glTexCoord4iv(const GLint* v);
GLAPI void APIENTRY glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
GLAPI void APIENTRY glTexCoord4sv(const GLshort* v);
GLAPI void APIENTRY glTexEnvf(GLenum target, GLenum pname, GLfloat param);
GLAPI void APIENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat* params);
GLAPI void APIENTRY glTexEnvi(GLenum target, GLenum pname, GLint param);
GLAPI void APIENTRY glTexEnviv(GLenum target, GLenum pname, const GLint* params);
GLAPI void APIENTRY glTexGend(GLenum coord, GLenum pname, GLdouble param);
GLAPI void APIENTRY glTexGendv(GLenum coord, GLenum pname, const GLdouble* params);
GLAPI void APIENTRY glTexGenf(GLenum coord, GLenum pname, GLfloat param);
GLAPI void APIENTRY glTexGenfv(GLenum coord, GLenum pname, const GLfloat* params);
GLAPI void APIENTRY glTexGeni(GLenum coord, GLenum pname, GLint param);
GLAPI void APIENTRY glTexGeniv(GLenum coord, GLenum pname, const GLint* params);
GLAPI void APIENTRY glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI void APIENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI void APIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param);
GLAPI void APIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat* params);
GLAPI void APIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param);
GLAPI void APIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint* params);
GLAPI void APIENTRY glTranslated(GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glTranslatef(GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glVertex2d(GLdouble x, GLdouble y);
GLAPI void APIENTRY glVertex2dv(const GLdouble* v);
GLAPI void APIENTRY glVertex2f(GLfloat x, GLfloat y);
GLAPI void APIENTRY glVertex2fv(const GLfloat* v);
GLAPI void APIENTRY glVertex2i(GLint x, GLint y);
GLAPI void APIENTRY glVertex2iv(const GLint* v);
GLAPI void APIENTRY glVertex2s(GLshort x, GLshort y);
GLAPI void APIENTRY glVertex2sv(const GLshort* v);
GLAPI void APIENTRY glVertex3d(GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glVertex3dv(const GLdouble* v);
GLAPI void APIENTRY glVertex3f(GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glVertex3fv(const GLfloat* v);
GLAPI void APIENTRY glVertex3i(GLint x, GLint y, GLint z);
GLAPI void APIENTRY glVertex3iv(const GLint* v);
GLAPI void APIENTRY glVertex3s(GLshort x, GLshort y, GLshort z);
GLAPI void APIENTRY glVertex3sv(const GLshort* v);
GLAPI void APIENTRY glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI void APIENTRY glVertex4dv(const GLdouble* v);
GLAPI void APIENTRY glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI void APIENTRY glVertex4fv(const GLfloat* v);
GLAPI void APIENTRY glVertex4i(GLint x, GLint y, GLint z, GLint w);
GLAPI void APIENTRY glVertex4iv(const GLint* v);
GLAPI void APIENTRY glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI void APIENTRY glVertex4sv(const GLshort* v);
GLAPI void APIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height);


#endif // !GL_VERSION_1_0

//
// API v1.0
// ==========================================================================

// ==========================================================================
// API v1.1
//

#ifndef GL_VERSION_1_1
#define GL_VERSION_1_1 1


using GLclampf = float;
using GLclampd = double;


constexpr auto GL_ALPHA12 = GLushort{0x803D};
constexpr auto GL_ALPHA16 = GLushort{0x803E};
constexpr auto GL_ALPHA4 = GLushort{0x803B};
constexpr auto GL_ALPHA8 = GLushort{0x803C};
constexpr auto GL_C3F_V3F = GLushort{0x2A24};
constexpr auto GL_C4F_N3F_V3F = GLushort{0x2A26};
constexpr auto GL_C4UB_V2F = GLushort{0x2A22};
constexpr auto GL_C4UB_V3F = GLushort{0x2A23};
constexpr auto GL_CLIENT_ATTRIB_STACK_DEPTH = GLushort{0x0BB1};
constexpr auto GL_COLOR_ARRAY = GLushort{0x8076};
constexpr auto GL_COLOR_ARRAY_POINTER = GLushort{0x8090};
constexpr auto GL_COLOR_ARRAY_SIZE = GLushort{0x8081};
constexpr auto GL_COLOR_ARRAY_STRIDE = GLushort{0x8083};
constexpr auto GL_COLOR_ARRAY_TYPE = GLushort{0x8082};
constexpr auto GL_COLOR_LOGIC_OP = GLushort{0x0BF2};
constexpr auto GL_DOUBLE = GLushort{0x140A};
constexpr auto GL_EDGE_FLAG_ARRAY = GLushort{0x8079};
constexpr auto GL_EDGE_FLAG_ARRAY_POINTER = GLushort{0x8093};
constexpr auto GL_EDGE_FLAG_ARRAY_STRIDE = GLushort{0x808C};
constexpr auto GL_FEEDBACK_BUFFER_POINTER = GLushort{0x0DF0};
constexpr auto GL_FEEDBACK_BUFFER_SIZE = GLushort{0x0DF1};
constexpr auto GL_FEEDBACK_BUFFER_TYPE = GLushort{0x0DF2};
constexpr auto GL_INDEX_ARRAY = GLushort{0x8077};
constexpr auto GL_INDEX_ARRAY_POINTER = GLushort{0x8091};
constexpr auto GL_INDEX_ARRAY_STRIDE = GLushort{0x8086};
constexpr auto GL_INDEX_ARRAY_TYPE = GLushort{0x8085};
constexpr auto GL_INDEX_LOGIC_OP = GLushort{0x0BF1};
constexpr auto GL_INTENSITY = GLushort{0x8049};
constexpr auto GL_INTENSITY12 = GLushort{0x804C};
constexpr auto GL_INTENSITY16 = GLushort{0x804D};
constexpr auto GL_INTENSITY4 = GLushort{0x804A};
constexpr auto GL_INTENSITY8 = GLushort{0x804B};
constexpr auto GL_LUMINANCE12 = GLushort{0x8041};
constexpr auto GL_LUMINANCE12_ALPHA12 = GLushort{0x8047};
constexpr auto GL_LUMINANCE12_ALPHA4 = GLushort{0x8046};
constexpr auto GL_LUMINANCE16 = GLushort{0x8042};
constexpr auto GL_LUMINANCE16_ALPHA16 = GLushort{0x8048};
constexpr auto GL_LUMINANCE4 = GLushort{0x803F};
constexpr auto GL_LUMINANCE4_ALPHA4 = GLushort{0x8043};
constexpr auto GL_LUMINANCE6_ALPHA2 = GLushort{0x8044};
constexpr auto GL_LUMINANCE8 = GLushort{0x8040};
constexpr auto GL_LUMINANCE8_ALPHA8 = GLushort{0x8045};
constexpr auto GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = GLushort{0x0D3B};
constexpr auto GL_N3F_V3F = GLushort{0x2A25};
constexpr auto GL_NORMAL_ARRAY = GLushort{0x8075};
constexpr auto GL_NORMAL_ARRAY_POINTER = GLushort{0x808F};
constexpr auto GL_NORMAL_ARRAY_STRIDE = GLushort{0x807F};
constexpr auto GL_NORMAL_ARRAY_TYPE = GLushort{0x807E};
constexpr auto GL_POLYGON_OFFSET_FACTOR = GLushort{0x8038};
constexpr auto GL_POLYGON_OFFSET_FILL = GLushort{0x8037};
constexpr auto GL_POLYGON_OFFSET_LINE = GLushort{0x2A02};
constexpr auto GL_POLYGON_OFFSET_POINT = GLushort{0x2A01};
constexpr auto GL_POLYGON_OFFSET_UNITS = GLushort{0x2A00};
constexpr auto GL_PROXY_TEXTURE_1D = GLushort{0x8063};
constexpr auto GL_PROXY_TEXTURE_2D = GLushort{0x8064};
constexpr auto GL_R3_G3_B2 = GLushort{0x2A10};
constexpr auto GL_RGB10 = GLushort{0x8052};
constexpr auto GL_RGB10_A2 = GLushort{0x8059};
constexpr auto GL_RGB12 = GLushort{0x8053};
constexpr auto GL_RGB16 = GLushort{0x8054};
constexpr auto GL_RGB4 = GLushort{0x804F};
constexpr auto GL_RGB5 = GLushort{0x8050};
constexpr auto GL_RGB5_A1 = GLushort{0x8057};
constexpr auto GL_RGB8 = GLushort{0x8051};
constexpr auto GL_RGBA12 = GLushort{0x805A};
constexpr auto GL_RGBA16 = GLushort{0x805B};
constexpr auto GL_RGBA2 = GLushort{0x8055};
constexpr auto GL_RGBA4 = GLushort{0x8056};
constexpr auto GL_RGBA8 = GLushort{0x8058};
constexpr auto GL_SELECTION_BUFFER_POINTER = GLushort{0x0DF3};
constexpr auto GL_SELECTION_BUFFER_SIZE = GLushort{0x0DF4};
constexpr auto GL_T2F_C3F_V3F = GLushort{0x2A2A};
constexpr auto GL_T2F_C4F_N3F_V3F = GLushort{0x2A2C};
constexpr auto GL_T2F_C4UB_V3F = GLushort{0x2A29};
constexpr auto GL_T2F_N3F_V3F = GLushort{0x2A2B};
constexpr auto GL_T2F_V3F = GLushort{0x2A27};
constexpr auto GL_T4F_C4F_N3F_V4F = GLushort{0x2A2D};
constexpr auto GL_T4F_V4F = GLushort{0x2A28};
constexpr auto GL_TEXTURE_ALPHA_SIZE = GLushort{0x805F};
constexpr auto GL_TEXTURE_BINDING_1D = GLushort{0x8068};
constexpr auto GL_TEXTURE_BINDING_2D = GLushort{0x8069};
constexpr auto GL_TEXTURE_BLUE_SIZE = GLushort{0x805E};
constexpr auto GL_TEXTURE_COORD_ARRAY = GLushort{0x8078};
constexpr auto GL_TEXTURE_COORD_ARRAY_POINTER = GLushort{0x8092};
constexpr auto GL_TEXTURE_COORD_ARRAY_SIZE = GLushort{0x8088};
constexpr auto GL_TEXTURE_COORD_ARRAY_STRIDE = GLushort{0x808A};
constexpr auto GL_TEXTURE_COORD_ARRAY_TYPE = GLushort{0x8089};
constexpr auto GL_TEXTURE_GREEN_SIZE = GLushort{0x805D};
constexpr auto GL_TEXTURE_INTENSITY_SIZE = GLushort{0x8061};
constexpr auto GL_TEXTURE_INTERNAL_FORMAT = GLushort{0x1003};
constexpr auto GL_TEXTURE_LUMINANCE_SIZE = GLushort{0x8060};
constexpr auto GL_TEXTURE_PRIORITY = GLushort{0x8066};
constexpr auto GL_TEXTURE_RED_SIZE = GLushort{0x805C};
constexpr auto GL_TEXTURE_RESIDENT = GLushort{0x8067};
constexpr auto GL_V2F = GLushort{0x2A20};
constexpr auto GL_V3F = GLushort{0x2A21};
constexpr auto GL_VERTEX_ARRAY = GLushort{0x8074};
constexpr auto GL_VERTEX_ARRAY_POINTER = GLushort{0x808E};
constexpr auto GL_VERTEX_ARRAY_SIZE = GLushort{0x807A};
constexpr auto GL_VERTEX_ARRAY_STRIDE = GLushort{0x807C};
constexpr auto GL_VERTEX_ARRAY_TYPE = GLushort{0x807B};

constexpr auto GL_CLIENT_ALL_ATTRIB_BITS = GLbitfield{0xFFFFFFFF};
constexpr auto GL_CLIENT_PIXEL_STORE_BIT = GLbitfield{0x00000001};
constexpr auto GL_CLIENT_VERTEX_ARRAY_BIT = GLbitfield{0x00000002};


using PFNGLARETEXTURESRESIDENTPROC = GLboolean (APIENTRY *)(GLsizei n, const GLuint* textures, GLboolean* residences);
using PFNGLARRAYELEMENTPROC = void (APIENTRY *)(GLint i);
using PFNGLBINDTEXTUREPROC = void (APIENTRY *)(GLenum target, GLuint texture);
using PFNGLCOLORPOINTERPROC = void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, const void* pointer);
using PFNGLCOPYTEXIMAGE1DPROC = void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
using PFNGLCOPYTEXIMAGE2DPROC = void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
using PFNGLCOPYTEXSUBIMAGE1DPROC = void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
using PFNGLCOPYTEXSUBIMAGE2DPROC = void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
using PFNGLDELETETEXTURESPROC = void (APIENTRY *)(GLsizei n, const GLuint* textures);
using PFNGLDISABLECLIENTSTATEPROC = void (APIENTRY *)(GLenum array);
using PFNGLDRAWARRAYSPROC = void (APIENTRY *)(GLenum mode, GLint first, GLsizei count);
using PFNGLDRAWELEMENTSPROC = void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const void* indices);
using PFNGLEDGEFLAGPOINTERPROC = void (APIENTRY *)(GLsizei stride, const void* pointer);
using PFNGLENABLECLIENTSTATEPROC = void (APIENTRY *)(GLenum array);
using PFNGLGENTEXTURESPROC = void (APIENTRY *)(GLsizei n, GLuint* textures);
using PFNGLGETPOINTERVPROC = void (APIENTRY *)(GLenum pname, void** params);
using PFNGLINDEXPOINTERPROC = void (APIENTRY *)(GLenum type, GLsizei stride, const void* pointer);
using PFNGLINDEXUBPROC = void (APIENTRY *)(GLubyte c);
using PFNGLINDEXUBVPROC = void (APIENTRY *)(const GLubyte* c);
using PFNGLINTERLEAVEDARRAYSPROC = void (APIENTRY *)(GLenum format, GLsizei stride, const void* pointer);
using PFNGLISTEXTUREPROC = GLboolean (APIENTRY *)(GLuint texture);
using PFNGLNORMALPOINTERPROC = void (APIENTRY *)(GLenum type, GLsizei stride, const void* pointer);
using PFNGLPOLYGONOFFSETPROC = void (APIENTRY *)(GLfloat factor, GLfloat units);
using PFNGLPOPCLIENTATTRIBPROC = void (APIENTRY *)();
using PFNGLPRIORITIZETEXTURESPROC = void (APIENTRY *)(GLsizei n, const GLuint* textures, const GLfloat* priorities);
using PFNGLPUSHCLIENTATTRIBPROC = void (APIENTRY *)(GLbitfield mask);
using PFNGLTEXCOORDPOINTERPROC = void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, const void* pointer);
using PFNGLTEXSUBIMAGE1DPROC = void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
using PFNGLTEXSUBIMAGE2DPROC = void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
using PFNGLVERTEXPOINTERPROC = void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, const void* pointer);


GLAPI GLboolean APIENTRY glAreTexturesResident(GLsizei n, const GLuint* textures, GLboolean* residences);
GLAPI void APIENTRY glArrayElement(GLint i);
GLAPI void APIENTRY glBindTexture(GLenum target, GLuint texture);
GLAPI void APIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI void APIENTRY glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI void APIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI void APIENTRY glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI void APIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glDeleteTextures(GLsizei n, const GLuint* textures);
GLAPI void APIENTRY glDisableClientState(GLenum array);
GLAPI void APIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count);
GLAPI void APIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const void* indices);
GLAPI void APIENTRY glEdgeFlagPointer(GLsizei stride, const void* pointer);
GLAPI void APIENTRY glEnableClientState(GLenum array);
GLAPI void APIENTRY glGenTextures(GLsizei n, GLuint* textures);
GLAPI void APIENTRY glGetPointerv(GLenum pname, void** params);
GLAPI void APIENTRY glIndexPointer(GLenum type, GLsizei stride, const void* pointer);
GLAPI void APIENTRY glIndexub(GLubyte c);
GLAPI void APIENTRY glIndexubv(const GLubyte* c);
GLAPI void APIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const void* pointer);
GLAPI GLboolean APIENTRY glIsTexture(GLuint texture);
GLAPI void APIENTRY glNormalPointer(GLenum type, GLsizei stride, const void* pointer);
GLAPI void APIENTRY glPolygonOffset(GLfloat factor, GLfloat units);
GLAPI void APIENTRY glPopClientAttrib();
GLAPI void APIENTRY glPrioritizeTextures(GLsizei n, const GLuint* textures, const GLfloat* priorities);
GLAPI void APIENTRY glPushClientAttrib(GLbitfield mask);
GLAPI void APIENTRY glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI void APIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
GLAPI void APIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
GLAPI void APIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const void* pointer);


#endif // !GL_VERSION_1_1

//
// API v1.1
// ==========================================================================


#endif // !__gl_h_ && !__GL_H__


#endif // SDL_OGL11_LOADER_GL_INCLUDED
